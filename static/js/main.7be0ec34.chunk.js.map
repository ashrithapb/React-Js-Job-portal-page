{"version":3,"sources":["components/Job.js","App.js","serviceWorker.js","index.js"],"names":["Job","useState","search","setSearch","jobData","setJobData","searchTag","setSearchTag","useEffect","Data","map","data","id","company","logo","new","featured","position","postedAt","contract","location","role","level","languages","tools","filterTech","filter","i","length","toString","toLowerCase","includes","searchJob","e","target","value","className","type","onChange","Container","key","Card","Body","Row","Col","sm","src","alt","onClick","language","tool","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7be0ec34.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Data from './data.json';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction Job() {\r\n\tconst [search, setSearch] = useState('');\r\n\tconst [jobData, setJobData] = useState([]);\r\n\tconst [searchTag, setSearchTag] = useState([]);\r\n\tuseEffect(() => {\r\n\t\tsetJobData(\r\n\t\t\tData.map((data) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: data.id,\r\n\t\t\t\t\tcompany: data.company,\r\n\t\t\t\t\tlogo: data.logo,\r\n\t\t\t\t\tnew: data.new,\r\n\t\t\t\t\tfeatured: data.featured,\r\n\t\t\t\t\tposition: data.position,\r\n\t\t\t\t\tpostedAt: data.postedAt,\r\n\t\t\t\t\tcontract: data.contract,\r\n\t\t\t\t\tlocation: data.contract,\r\n\t\t\t\t\trole: data.role,\r\n\t\t\t\t\tlevel: data.level,\r\n\t\t\t\t\tlanguages: data.languages,\r\n\t\t\t\t\ttools: data.tools,\r\n\t\t\t\t\tsearchTag: [data.role, data.level, data.languages, data.tools],\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t);\r\n\t\t/*setSearchTag(\r\n\t\t\tjobData.map((data) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\trole: data.role,\r\n\t\t\t\t\tlevel: data.level,\r\n\t\t\t\t\tlanguages: data.languages,\r\n\t\t\t\t\ttools: data.tools,\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t);*/\r\n\t}, []);\r\n\tconst filterTech = jobData.filter((data) => {\r\n\t\tfor (let i = 0; i < search.length; i++) {\r\n\t\t\tlet istrue = data.searchTag.toString().toLowerCase().includes(search[i]);\r\n\t\t\tif (!istrue) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t});\r\n\tconst searchJob = (e) => {\r\n\t\tsetSearchTag([...searchTag, e.target.value.toLowerCase()]);\r\n\t\tsetSearch([...search, e.target.value.toLowerCase()]);\r\n\t\t//alert(e.target.value.toLowerCase());\r\n\t};\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"header\"></div>\r\n\t\t\t<input type=\"text\" className=\"search-bar\" value={search} onChange={(e) => setSearch(e.target.value)} />\r\n\t\t\t{filterTech.map((data) => {\r\n\t\t\t\t//console.log(data.searchTag);\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Container key={data.id}>\r\n\t\t\t\t\t\t<Card>\r\n\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t<Col sm={2}>\r\n\t\t\t\t\t\t\t\t\t\t<img src={data.logo} alt=\"logo\" />\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t<Col sm={5}>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"properties\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"company\">{data.company}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t{data.new === true ? <span className=\"new\"> NEW! </span> : ''}\r\n\t\t\t\t\t\t\t\t\t\t\t{data.featured === true ? <span className=\"featured\"> FEATURED </span> : ''}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"title\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"dark-gray\"></span>\r\n\t\t\t\t\t\t\t\t\t\t\t{data.position}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"details\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mr-2 light-gray\">{data.postedAt}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mr-2 list-point light-gray\">{data.contract}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mr-2 list-point light-gray\">{data.location}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t<Col sm={5} className=\"description\">\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"light-box\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={data.role}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => searchJob(e)}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{data.role}\r\n\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"light-box\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={data.level}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => searchJob(e)}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{data.level}\r\n\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t{data.languages.map((language) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"light-box\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={language}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={language}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => searchJob(e)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{language}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t{data.tools.map((tool) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"light-box\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={tool}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={data.tool}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => searchJob(e)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{tool}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t</Container>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Job;\r\n","import React from 'react';\nimport Job from './components/Job';\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Job />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}